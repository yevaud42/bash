ALIAS_COUNT='      70'
Apple_PubSub_Socket_Render=/tmp/launch-7fXnDk/Render
BASH=/bin/bash
BASH_ARGC=()
BASH_ARGV=()
BASH_LINENO=()
BASH_SOURCE=()
BASH_VERSINFO=([0]="3" [1]="2" [2]="48" [3]="1" [4]="release" [5]="x86_64-apple-darwin10.0")
BASH_VERSION='3.2.48(1)-release'
COLOR1=
COLOR2=
COLOR3=
COLORFGBG='15;0'
COLOR_BLACK='\[\033[01;30m\]'
COLOR_BLUE='\[\033[01;34m\]'
COLOR_CYAN='\[\033[01;36m\]'
COLOR_FG=
COLOR_GREEN='\[\033[01;32m\]'
COLOR_PURPLE='\[\033[00;35m\]'
COLOR_RED='\[\033[00;31m\]'
COLOR_VIOLET='\[\033[00;35m\]'
COLOR_WHITE='\[\033[01;37m\]'
COLOR_YELLOW='\[\033[01;33m\]'
COLUMNS=120
COMMAND_MODE=legacy
DIRSTACK=()
DISPLAY=/tmp/launch-qVka4V/org.x:0
EUID=501
GROUPS=()
HISTFILE=/Users/mdm/.bash_history
HISTFILESIZE=500
HISTSIZE=500
HOME=/Users/mdm
HOSTNAME=Gont.local
HOSTTYPE=x86_64
IFS=$' \t\n'
LANG=en_US
LC_COLLATE=en_US
LC_CTYPE=en_US
LC_MESSAGES=en_US
LC_MONETARY=en_US
LC_NUMERIC=en_US
LC_TIME=en_US
LESS=-X
LINES=50
LOGNAME=mdm
LSOPT_COLOR=-G
LSOPT_GROUPFOLDERS=-g
LSOPT_OSCUSTOM='-l -F -h'
LSOPT_SHOWHIDDEN=-A
MACHTYPE=x86_64-apple-darwin10.0
MAILCHECK=60
MiscFixed='-misc-fixed-medium-r-normal--*-110-*'
MiscFixedLarge='-misc-fixed-medium-r-normal--*-140-*'
MiscFixedSmall='-misc-fixed-medium-r-normal--*-100-*'
MiscFixedTiny='-misc-fixed-medium-r-normal--*-80-*'
OLDPWD=/Users/mdm
OPTERR=1
OPTIND=1
OSTYPE=darwin10.0
PATH='/Users/mdm/bin/prefix:/Applications/Utilities:/Places/bin:/Places/UserApps:/Places/UserBin:/Places/Links/Bin\:/opt/local/bin:/opt/local/sbin:/opt/local/etc:/opt/local/share:/opt/local/x11:/opt/local/share/bin\:/sw/local/bin:/sw/port/bin:/sw/port:/sw/local/sbin\:/usr/bin:/bin:/usr/sbin:/sbin\:/Users/mdm/bin/postfix:/Users/mdm/Applications/bin:/Users/mdm/Scripts'
PIPESTATUS=([0]="0" [1]="0")
PPID=42189
PROMPT_POSTFIX='-> '
PS1='>>\u@\l<<  (\D{%m/%d/%Y})  [TTY: \l j:\j \$\$:$$]\n\h#\!:  [\w/] $PROMPT_POSTFIX'
PS1_ALT1='[\D \u@\h - tty:\l - jobs:\j]\n\! \@#\! (tty:\l+\j) \w]\->  '
PS2='(cont..) ->  '
PS4='+ '
PWD=/opt
SHELL=/bin/bash
SHELLOPTS=braceexpand:emacs:hashall:histexpand:history:interactive-comments:monitor
SHLVL=1
SSH_AUTH_SOCK=/tmp/launch-VBXIkc/Listeners
SYNERGY_CONFIG=/Places/Applications/Synergy/synergy.conf
SYNERGY_HOST=192.168.3.36
SYNERGY_HOSTOPTS=' -d INFO '
SYNERGY_ROOT=/Places/Applications/Synergy
SYNERGY_SCREEN_NAME=Leguin
TERM=linux
TERM_PROGRAM=iTerm.app
TMPDIR=/var/folders/Dk/DkUfePSuEfuEGdEnSBtnGU+++TI/-Tmp-/
UID=501
USER=mdm
_=
_FINK_PATH=/sw/local/bin:/sw/port/bin:/sw/port:/sw/local/sbin
_HOST_TYPE=Apple
_LSOPTS=' -l -F -h -G -g '
_MACPORT_PATH=/opt/local/bin:/opt/local/sbin:/opt/local/etc:/opt/local/share:/opt/local/x11:/opt/local/share/bin
_SP=r4t5y6u7i8
_STARTUP_PATH=/usr/bin:/bin:/usr/sbin:/sbin
_USER_PATH_POSTFIX=/Users/mdm/bin/postfix:/Users/mdm/Applications/bin:/Users/mdm/Scripts
_USER_PATH_PREFIX=/Users/mdm/bin/prefix:/Applications/Utilities:/Places/bin:/Places/UserApps:/Places/UserBin:/Places/Links/Bin
__CF_USER_TEXT_ENCODING=0x1F5:0:0
.color () 
{ 
    case "$1" in 
        light | Light | LIGHT)
            export COLORSCHEME=light;
            .sysWarn "Colorscheme configured for LIGHT background.  Reloading .bashrc.."
        ;;
        dark | Dark | DARK)
            export COLORSCHEME=dark;
            .sysWarn "Colorscheme configured for DARK background.  Reloading .bashrc..."
        ;;
        reload | Reload | load | Load | RELOAD | LOAD | apply | APPLY)
            doApply=$true;
            .sysWarn "Reloading personal shell file ~/.bashrc to update any affected aspects...";
            . ~/.bashrc
        ;;
        list | List | LIST | show | Show | SHOW)
            printf "Color                 Sample Text";
            printf "-------------------   ---------------------------------------";
            printf "COLOR_FG           " $COLOR_FG "  Four score and seven years ago";
            printf "COLOR_WHITE	 " $COLOR_WHITE "  Our forefathers brought forth";
            printf "COLOR_BLACK	 " $COLOR_BLACK "  Upon this continent, a new neation";
            printf "COLOR_RED	 " $COLOR_RED "  Under God, and dedicated to the";
            printf "COLOR_BLUE	 " $COLOR_BLUE "  proposition that all men are";
            printf "COLOR_GREEN	 " $COLOR_GREEN "  created equal.  And that all";
            printf "COLOR_YELLOW	 " $COLOR_YELLOW "  men are guaranteed certain";
            printf "COLOR_VIOLET	 " $COLOR_VIOLET "  inalienable rights, chief among";
            printf " "$COLOR_FG"-----------------------------------------------------------------";
            return 0
        ;;
        *)
            echo "Invalid color command.  Valid options are:";
            echo "--------- - - - - ------ - - -- - - ";
            echo "  light   - Configure terminal colors for a light background.";
            echo "  dark    - Configure terminal colors for dark background.";
            echo "  list    - Same as <show> above... but more fun";
            echo "   |show  - Display colors in sample text";
            echo "";
            echo "  reload  - Apply the color updates to the shell by reloading ~/.bashrc";
            echo "   |load  - Same as reload";
            echo "	 |apply - Another name for reload";
            echo "  fg <color> - Set the foregrouhnd color to specified value";
            return -1
        ;;
    esac;
    if [[ -n $doApply ]]; then
        .sysWarn "Applying changes to visual environment (reloading bash_custom)...";
        . ~/.bashrc;
    fi
}
.console () 
{ 
    if [ $# -lt 1 ]; then
        echo "ERROR:  Invalid usage.";
        return .consoleHelp;
    fi;
    local opt = $1;
    if [ $opt[0]='-' & $opt[1]='-' ]; then
        $opt = $opt[2-$#opt];
    fi;
    case "$opt" in 
        -help)
            return .consoleHelp
        ;;
        -font | --font)
            setfont /usr/share/consolefonts/$2
        ;;
        *)
            echo "ERROR:  Unknown option: $opt";
            return .consoleHelp
        ;;
    esac
}
.consoleHelp () 
{ 
    echo "Usage info for .console:";
    echo ".console <option> ...";
    echo "where <option> can be one of: ";
    echo "  -help:  Display this message";
    echo "  -font <fontName> : Set font for console.  Default is Lat2-VGA8";
    echo "  -fontlist : List fonts available for -font option.";
    echo "  -reset:  Reset the console when things go bad...";
    echo "  -probe:  Probe available modes with vbaprobe.";
    echo ""
}
.edit () 
{ 
    local shEditor=$_SHELL_ED;
    local shEditor_Args=$_SHELL_ED_ARGS;
    if [[ -n $shEditor ]]; then
        .sysWarn "Using default shell editor 'vi' for editing.  To customize, set _SHELL_ED env var.";
        shEditor="vi";
        shEditor_Args=" -w ";
    fi;
    case "$1" in 
        -l* | load* | -L* | Load*)
            .sysWarn "Reloading ~/.bashrc file...";
            . ~/.bashrc
        ;;
        *)
            .sysEcho "Invoking '$_SHELL_ED' editor for .bash folder...";
            $shEditor $shEditor_Args $HOME/.bash/;
            .sysWarn "Editing completed.  Returning to shell..."
        ;;
    esac;
    return 0
}
.go () 
{ 
    $_GOLIST[$#_GOLIST] = $1;
    // later on - make this look through common paths trying to find the folder inq uestion.... as I used;
    // to do in Powershell;
    cd $1;
    return 0
}
.lsOpt () 
{ 
    if [ $# != 1 ]; then
        echo "Invalid usage.  Should be .lsOpt <optionName> ";
        echo "Where optionName can be:";
        echo "    color		:	Turn color on or off in the output";
        echo "    groupDirs :	Group folders in output listing.";
        return 0;
    fi;
    local optName=$1;
    local oldOpts=$_LSOPTS;
    local newOpts=$_LSOPTS;
    case "$optName" in 
        color)
            newOpts='--color=always'
        ;;
        groupFold* | gFold*)
            newOpts='-G'
        ;;
        *)

        ;;
    esac;
    return 1
}
.psg () 
{ 
    .pse | grep -i $@
}
.run () 
{ 
    local permissionCheck=0;
    local appPath="";
    case "$1" in 
        -p* | permission | perm)
            .sysWarn "Search expanded to include any file with executable bit set...";
            checkPermissionBits=1;
            appName="$2"
        ;;
        *)
            appName="$1"
        ;;
    esac;
    if [ -x "/Applications/$appName" ]; then
        appPath="/Applications/$appName";
        .sysEcho "Found it at $appPath";
    fi
}
.sysEcho () 
{ 
    echo $COLOR_ECHO "Sys:  $*" $COLOR_FOREGROUND
}
.sysError () 
{ 
    echo $COLOR_ERROR "ERROR: $*" $COLOR_FOREGROUND
}
.sysWarn () 
{ 
    echo $COLOR_WARN "WARNING: $*" $COLOR_FOREGROUND
}
.utilAppleCheck () 
{ 
    export UNAME=$(uname -a);
    case "$UNAME" in 
        *Darwin* | *Apple* | *OS\ X*)
            return 0
        ;;
        *)
            return -1
        ;;
    esac
}
.utilTerminalHasColor () 
{ 
    case "$TERM" in 
        xterm* | rxvt* | uxterm* | konsole* | terminal* | *terminal)
            echo "Terminal $TERM is assumed to support COLOR...";
            return 0
        ;;
        *)
            echo "Terminal $TERM is assumed to NOT support COLOR...";
            return -1
        ;;
    esac
}
